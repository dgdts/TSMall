layouts:
  - path: cmd/main.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator.

      package main

      import (
        "context"
        "fmt"
        "os"
        "path/filepath"
        "ssg/kitex-common/common/local_conf"
        "strings"

        "github.com/cloudwego/hertz/pkg/app"
      	"github.com/cloudwego/hertz/pkg/common/utils"
      	"github.com/cloudwego/hertz/pkg/protocol/consts"
        "{{.GoModule}}/biz/global_init"
      	"{{.GoModule}}/biz/router"
        _ "{{.GoModule}}/kit/xjsoniter"
      )
      func env() {
        env := strings.ToLower(os.Getenv("ENV"))
        if env == "" {
          env = "dev"
          }
          _ = os.Setenv("ENV", env)
          }

      func main() {
        env()
        // 全局初始化，本地配置文件解析， 配置中心配置文件解析等等
        binPath, _ := filepath.Abs(filepath.Dir(os.Args[0]))
        rootPath := filepath.Dir(binPath)
        local_conf.ServerConfigPath = fmt.Sprintf("%s/configs/%s/conf.yaml", rootPath, os.Getenv("ENV"))

        // init hertz server
        h := global_init.InitServer(local_conf.GetGConf().Hertz.Service[0])

        // add a ping route to test
        h.GET("/ping", func(c context.Context, ctx *app.RequestContext) {
        	ctx.JSON(consts.StatusOK, utils.H{
              "ping": "pong",
              "pod_ip": os.Getenv("POD_IP"),
              })
        })

        // register biz router
      	router.GeneratedRegister(h)
        // server start
      	h.Spin()
      }

  - path: go.mod
    delims:
      - '{{'
      - '}}'
    body: |-
      module {{.GoModule}}

      go 1.21

      replace (
        github.com/apache/thrift => github.com/apache/thrift v0.13.0
        ssg/kitex-common => gitlab2.seasungame.com/ssg/backend/framework/go/kitex-common.git v0.5.7
        )

  - path: biz/router/register.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.

      package router

      import (
      	"github.com/cloudwego/hertz/pkg/app/server"
      )

      // GeneratedRegister registers routers generated by IDL.
      func GeneratedRegister(r *server.Hertz){
      	//INSERT_POINT: DO NOT DELETE THIS LINE!
      }


  - path: configs/dev/conf.yaml
    delims:
      - ""
      - ""
    body: |-
      global:                     #全局配置
        namespace: Development     #环境类型, 首字母大写, 正式环境：Production 开发环境：Development 测试环境：Test 根据具体需求可只建立正式环境和开发环境
        env_name: dev          #环境名称, 正式环境: prod  开发环境/测试环境: test
        local_ip: ${POD_IP}               
        container_name: ${HOSTNAME}       


      hertz:
        app: "ssg"
        server: "enterbuild"
        enable_pprof: true 
        enable_gzip: true 
        enable_access_log: true  
        service: 
          - name: "HelloService"
            addr: ":8888"

      log:                      #日志配置
        log_mode: console
        log_level: debug
        log_file_name: "log/hertz.log"
        log_max_size: 10
        log_max_age: 3
        log_max_backups: 50

      registry:                 #注册中心,目前公共库只支持nacos
        name: nacos 
        namespace: "9f36909a-1c02-4ed7-8bc4-d744c6660350"
        registry_address:
          - 10.11.89.99:8848
        username: ""
        password: ""

      selector:                 #服务发现,目前公共库只支持nacos
        name: nacos 
        namespace: "9f36909a-1c02-4ed7-8bc4-d744c6660350" 
        server_addr:
          - 10.11.89.99:8848
        username: ""
        password: ""

      config:                   #配置中心,目前公共库只支持nacos
        name: nacos 
        namespace: "9f36909a-1c02-4ed7-8bc4-d744c6660350"
        server_addr:
          - 10.11.89.99:8848
        username: ""
        password: ""

      prometheus:               #监控配置
        enable: true
        addr: ":9099"
        path: "/prometheus/metrics"



  - path: configs/prod/conf.yaml
    delims:
      - ""
      - ""
    body: |-
      global:                     #全局配置
        namespace: Production     #环境类型, 首字母大写, 正式环境：Production 开发环境：Development 测试环境：Test 根据具体需求可只建立正式环境和开发环境
        env_name: prod          #环境名称, 正式环境: prod  开发环境/测试环境: test
        local_ip: ${POD_IP}               
        container_name: ${HOSTNAME}       


      hertz:
        app: "ssg"
        server: "enterbuild"
        enable_pprof: false
        enable_gzip: true 
        enable_access_log: true  
        service: 
          - name: "HelloService"
            addr: ":8888"

      log:                      #日志配置
        log_mode: console
        log_level: info
        log_file_name: "log/hertz.log"
        log_max_size: 10
        log_max_age: 3
        log_max_backups: 50

      registry:                 #注册中心,目前公共库只支持nacos
        name: nacos 
        namespace: "29fca852-29df-4c01-9ebb-1399a52b59c6"
        registry_address:
          - 127.0.0.1:8848
        username: ""
        password: ""

      selector:                 #服务发现,目前公共库只支持nacos
        name: nacos 
        namespace: "29fca852-29df-4c01-9ebb-1399a52b59c6" 
        server_addr:
          - 127.0.0.1:8848
        username: ""
        password: ""

      config:                   #配置中心,目前公共库只支持nacos
        name: nacos 
        namespace: "29fca852-29df-4c01-9ebb-1399a52b59c6"
        server_addr:
          - 127.0.0.1:8848
        username: ""
        password: ""

      prometheus:               #监控配置
        enable: true
        addr: ":9099"
        path: "/prometheus/metrics"


  - path: configs/test/conf.yaml
    delims:
      - ""
      - ""
    body: |-
      global:                     #全局配置
        namespace: Test     #环境类型, 首字母大写, 正式环境：Production 开发环境：Development 测试环境：Test 根据具体需求可只建立正式环境和开发环境
        env_name: test          #环境名称, 正式环境: prod  开发环境/测试环境: test
        local_ip: ${POD_IP}               
        container_name: ${HOSTNAME}       


      hertz:
        app: "ssg"
        server: "enterbuild"
        enable_pprof: false 
        enable_gzip: true 
        enable_access_log: true  
        service: 
          - name: "HelloService"
            addr: ":8888"

      log:                      #日志配置
        log_mode: console
        log_level: debug
        log_file_name: "log/hertz.log"
        log_max_size: 10
        log_max_age: 3
        log_max_backups: 50

      registry:                 #注册中心,目前公共库只支持nacos,确定后再调整
        name: nacos 
        namespace: "d7afe12b-a9ea-4757-ac94-e56ea6decd34"
        registry_address:
          - mse-71d20570-nacos-ans.mse.aliyuncs.com:8848
        username: ""
        password: ""

      selector:                 #服务发现,目前公共库只支持nacos,确定后再调整
        name: nacos 
        namespace: "d7afe12b-a9ea-4757-ac94-e56ea6decd34" 
        server_addr:
          - mse-71d20570-nacos-ans.mse.aliyuncs.com:8848
        username: ""
        password: ""

      config:                   #配置中心,目前公共库只支持nacos,确定后再调整
        name: nacos 
        namespace: "d7afe12b-a9ea-4757-ac94-e56ea6decd34"
        server_addr:
          - mse-71d20570-nacos-ans.mse.aliyuncs.com:8848
        username: ""
        password: ""

      prometheus:               #监控配置
        enable: true
        addr: ":9099"
        path: "/prometheus/metrics"

  - path: README.md
    delims:
      - ""
      - ""
    body: |-
      # *** Project

      ## introduce

      - Use the [Hertz](https://github.com/cloudwego/hertz/) framework
      - Integration of pprof, cors, recovery, access_log, gzip and other extensions of Hertz.
      - Generating the base code for unit tests.
      - Provides basic profile functions.
      - Provides the most basic MVC code hierarchy.

      ## Directory structure

      |  catalog   | introduce  |
      |  ----  | ----  |
      | conf  | Configuration files |
      | cmd/main.go  | Startup file |
      | hertz_gen  | Hertz generated model |
      | biz/handler  | Used for request processing, validation and return of response. |
      | biz/service  | The actual business logic. |
      | biz/router  | Routing and middleware registration |
      | biz/utils  | Wrapped some common methods |

      ## How to run

      ```shell
      ./build_hz.sh
      ./script/run.sh
      ```

  - path: .hz
    delims:
      - "{{"
      - "}}"
    body: |-
      // Code generated by hz. DO NOT EDIT.

      hz version: {{.hzVersion}},
      handlerDir: biz/handler
      modelDir: hertz_gen
      routerDir: biz/router

  - path: .gitignore
    delims:
      - ""
      - ""
    body: |-
      *.o
      *.a
      *.so
      _obj
      _test
      *.[568vq]
      [568vq].out
      *.cgo1.go
      *.cgo2.c
      _cgo_defun.c
      _cgo_gotypes.go
      _cgo_export.*
      _testmain.go
      *.exe
      *.exe~
      *.test
      *.prof
      *.rar
      *.zip
      *.gz
      *.psd
      *.bmd
      *.cfg
      *.pptx
      *.log
      *nohup.out
      *settings.pyc
      *.sublime-project
      *.sublime-workspace
      !.gitkeep
      .DS_Store
      /.idea
      /.vscode
      /output
      *.local.yml
      /idl/kitex_gen
      /*/kitex_gen
      /cms_http_manager/output
      /cms_http_api/output
      go.sum

  - path: biz/utils/resp.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package utils

      import (
      	"context"
        "errors"
        "{{.GoModule}}/biz/errno"
        "strconv"

      	"github.com/cloudwego/hertz/pkg/app"
      )

      // SendErrResponse  pack error response
      func SendErrResponse(ctx context.Context, c *app.RequestContext, code int, err error) {
      	// todo edit custom code
      	c.String(code, err.Error())
      }

      // SendSuccessResponse  pack success response
      func SendSuccessResponse(ctx context.Context, c *app.RequestContext, code int, data interface{}) {
      	// todo edit custom code
      	c.JSON(code, data)
      }

      type BaseResp struct {
        Code int32       `json:"code"`
        Msg    string      `json:"msg"`
        Data   interface{} `json:"data"`
      }

      // BuildBaseErr convert error and build BaseResp 接口返回时错误处理
      func BuildBaseErr(c *app.RequestContext, err error) *BaseResp {
        if err == nil {
          return baseResp(c, errno.Success)
        }

        e := errno.ErrNo{}
        if errors.As(err, &e) {
          return baseResp(c, e)
        }

        s := errno.ServiceErr.WithMessage(err.Error())
        return baseResp(c, s)
      }

      // BuildBaseResp convert data and build BaseResp 接口返回时数据处理
      func BuildBaseResp(c *app.RequestContext, data interface{}) *BaseResp {
        return &BaseResp{
          Code: errno.SuccessCode,
          Msg:    "success",
          Data:   data,
        }
      }

      // BaseResp build BaseResp from error
      func baseResp(c *app.RequestContext, err errno.ErrNo) *BaseResp {
      	// 监控埋点
        c.Response.Header.Set("bizStatusCode", strconv.Itoa(int(err.ErrCode)))
        return &BaseResp{
          Code: err.ErrCode,
          Msg:    err.ErrMsg, 
        }
      }

  - path: biz/errno/errno.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package errno

      import (
        "errors"
        "fmt"
      )

      // 基础错误码定义 10000开头, 0 ：表示正常 ====================================
      const (
        SuccessCode    = 0
        ServiceErrCode = iota + 10000
        ParamErrCode
        RecordNotFoundErrCode
      )

      // 基础错误内容
      const (
        SuccessMsg           = "Success"
        ServerErrMsg         = "Service is buzy now, Please try again later"
        ParamErrMsg          = "Wrong Parameter has been given"
        RecordNotFoundErrMsg = "Record not found"
      )

      // 基础自定义错误
      var (
        Success           = NewErrNo(SuccessCode, SuccessMsg)
        ServiceErr        = NewErrNo(ServiceErrCode, ServerErrMsg)
        ParamErr          = NewErrNo(ParamErrCode, ParamErrMsg)
        RecordNotFoundErr = NewErrNo(RecordNotFoundErrCode, RecordNotFoundErrMsg)
      )

      type ErrNo struct {
        ErrCode int32  `json:"err_code"`
        ErrMsg  string `json:"err_msg"`
      }

      func (e ErrNo) Error() string {
        return fmt.Sprintf("err_code=%d, err_msg=%s", e.ErrCode, e.ErrMsg)
      }

      func NewErrNo(code int32, msg string) ErrNo {
        return ErrNo{code, msg}
      }

      func NewErrCode(code int32) ErrNo {
        return ErrNo{
          ErrCode: code,
          ErrMsg:  "",
        }
      }

      func (e ErrNo) WithMessage(msg string) ErrNo {
        e.ErrMsg = msg
        return e
      }

      // ConvertErr convert error to Errno
      func ConvertErr(err error) ErrNo {
        Err := ErrNo{}
        if errors.As(err, &Err) {
          return Err
        }

        s := ServiceErr
        s.ErrMsg = err.Error()
        return s
      }

  - path: build_hz.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/bin/bash
      RUN_NAME="{{.ServiceName}}"
      BASE_DIR=$(pwd)
      OUTPUT=${BASE_DIR}/output
      TARGET_BIN=${OUTPUT}/bin
      TARGET_CONF=${OUTPUT}/configs
      TARGET_DATA=${OUTPUT}/data

      DATE=$(date +"%Y%m%d%H%M%S")

      rm -rf ${OUTPUT}
      mkdir -p ${TARGET_BIN}
      mkdir -p ${TARGET_CONF}
      mkdir -p ${TARGET_DATA}
     
      # 根据当前系统自动切换编译方式
      if [[ `uname` == 'Linux' ]]; then   
          GOOS=linux GOARCH=amd64 go build -o ${TARGET_BIN}/${RUN_NAME} ${BASE_DIR}/cmd/main.go
      else
          go build -o ${TARGET_BIN}/${RUN_NAME} ${BASE_DIR}/cmd/main.go    
      fi

      cp -rf ${BASE_DIR}/configs/* ${TARGET_CONF}
      echo ${RUN_NAME}" Build Success "${DATE}

  - path: script/run.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/bin/bash
      CURDIR=$(pwd)
      echo "$CURDIR/output/bin/{{.ServiceName}}"
      exec "$CURDIR/output/bin/{{.ServiceName}}"

  - path: script/healthcheck.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/bin/bash
      #!/bin/sh

      # 检查进程是否存活
      #ps -ef | grep "{{.ServiceName}}" | grep -v "grep" | wc -l | awk '{if ($1>0) exit 0; else exit -1;}'

      # 检查端口是否监听
      port_cnt=`netstat -tulpn | grep 'LISTEN' | grep ':8000' | wc -l`
      if [[ $port_cnt -lt 1 ]]; then
          echo "health check fail, no port listen"
          exit 1
      fi

      # 检查进程是否存活
      proc_cnt=`ps aux | grep "{{.ServiceName}}" | grep -v "grep" | wc -l`
      if [[ $proc_cnt -lt 1 ]]; then
          echo "health check fail, no process"
          exit 2
      fi

      exit 0
      
  - path: Makefile
    delims:
      - "{{"
      - "}}"
    body: |-
      generate:
      	hz update -idl idl/$(service).proto 
      
      {{.ServiceName}}:
      	make service={{.ServiceName}} generate

      all:
      	make {{.ServiceName}}


  - path: Dockerfile
    delims:  
      - "{{"
      - "}}"
    body: |-
      FROM hubzhidc.seasungame.com/tc-devops/ci:golang-1.21.10-jdk-8-centos-7.9 as builder
      LABEL stage=gobuilder

      ENV GOOS linux
      ENV GOARCH amd64
      ENV CGO_ENABLED 0

      ARG ARTIFACT_ID

      WORKDIR /build
      COPY ./$ARTIFACT_ID/output .



      FROM hubzhidc.seasungame.com/tc-devops/os_base:alpine-3.16

      ARG ARTIFACT_ID
      USER root 

      COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
      COPY --from=builder /build /application/$ARTIFACT_ID

      ENV TZ=Asia/Shanghai
      WORKDIR /application/$ARTIFACT_ID

      # COPY /usr/share/zoneinfo /usr/share/zoneinfo
      # COPY ./$ARTIFACT_ID/output .
      EXPOSE 8888
      RUN chmod +x /application/$ARTIFACT_ID/bin/$ARTIFACT_ID && chmod 4755 /bin/busybox && apk update && apk add curl && apk add busybox-extras

      ENTRYPOINT ["./bin/{{.ServiceName}}"]


  - path: biz/constant/const.go
    delims:
      - ""
      - ""
    body: |-
      package constant

      const (
        FRAME_NAME        = "hertz" //服务名全称前面的框架名称
        TIME_LAYOUT       = "2006-01-02T15:04:05Z" //时间格式化-UTC
        TIME_LAYOUT_LOCAL = "2006-01-02 15:04:05"  //时间格式化-LOCAL
      )

  - path: biz/r_conf/biz_init.go
    delims:
      - ""
      - ""
    body: |-
      package r_conf

      import (
        "ssg/kitex-common/common/remote_conf"

        "github.com/cloudwego/hertz/pkg/common/hlog"
        "gopkg.in/yaml.v3"
      )
      //初始化业务参数配置
      var conf_group = "Dev"
      var conf_data_id = "biztest"
      var BizCongfig *BizConfig

      type BizConfig struct {
        //test_biz_config
        TestBizConfig string `yaml:"test_biz_config"`
      }

      func Biz_conf_init() {
        tmpConfig := &BizConfig{}
        //需要自行指定group  和  dataid
        remote_conf.GetConfig(conf_group, conf_data_id, tmpConfig)
        hlog.Infof("remote config : [%+v]", tmpConfig.TestBizConfig)

        BizCongfig = tmpConfig
        go watch(conf_group, conf_data_id)
      }

      func watch(group string, key string) {
        c, err := remote_conf.Watch(group, key)
        if err != nil {
          hlog.Errorf("watch failed. error: %s", err.Error())
          panic(err)
        }

        for resp := range c {
          tmpConfig := &BizConfig{}
          err := yaml.Unmarshal([]byte(resp), &tmpConfig)
          if err != nil {
            panic(err)
          }

          hlog.Infof("remote config Change tmp: \n %v", tmpConfig.TestBizConfig)
          BizCongfig = tmpConfig
        }
        hlog.Infof("watch config end")
      }

  - path: biz/global_init/init.go
    delims:
      - ""
      - ""
    body: |-
      package global_init

      import (
        "fmt"
        "{{.GoModule}}/biz/r_conf"

        "github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
        "github.com/cloudwego/hertz/pkg/app/server/render"
        "github.com/hertz-contrib/cors"
        "github.com/hertz-contrib/gzip"
        "github.com/hertz-contrib/logger/accesslog"
        "github.com/hertz-contrib/pprof"
        jsoniter "github.com/json-iterator/go"
        "{{.GoModule}}/biz/constant"

        "ssg/kitex-common/common/biz_init"
        "ssg/kitex-common/common/local_conf"
        "ssg/kitex-common/suite/server_suite"

        "github.com/cloudwego/hertz/pkg/app/server"
        "gopkg.in/natefinch/lumberjack.v2"
      )

      func InitServer(service local_conf.Service) (h *server.Hertz) {
        // log初始化
        biz_init.InitHLog(&lumberjack.Logger{
          Filename:   local_conf.GetGConf().Log.LogFileName,
          MaxSize:    local_conf.GetGConf().Log.LogMaxSize,
          MaxBackups: local_conf.GetGConf().Log.LogMaxBackups,
          MaxAge:     local_conf.GetGConf().Log.LogMaxAge,
          Compress:   local_conf.GetGConf().Log.LogCompress,
        }, local_conf.HLogLevel(), local_conf.GetGConf().Log.LogMode)

        // 初始化HertzServer, 这里与注册中心强绑定, 如果不需要注册中心, 可以将此行注释掉自行实现
        h = server.New(server_suite.HertzCommonServerSuite{
          Address: local_conf.GetGConf().Hertz.Service[0].Address,
          CurrentServiceName: fmt.Sprintf("%s.%s.%s.%s",
            constant.FRAME_NAME,
            local_conf.GetGConf().Hertz.App,
            local_conf.GetGConf().Hertz.Server,
            local_conf.GetGConf().Hertz.Service[0].Name),
          RegistryAddr: local_conf.GetGConf().Registry.RegistryAddress,
          RegistryType: local_conf.GetGConf().Registry.Name,
          NamespaceId:  local_conf.GetGConf().Config.Namespace,
          Username:     local_conf.GetGConf().Registry.Username,
          Password:     local_conf.GetGConf().Registry.Password,
        }.Options()...)

        // 注册通用中间件
        registerMiddleware(h)

        // 业务参数初始化，默认远程配置
        r_conf.Biz_conf_init()

        // mysql初始化,远程/本地
        // mysql.RegisterConnByGroup("group", "data_id")
        // mysql.RegisterConnByLocal("group", "data_id")

        // reids初始化,远程/本地
        // redis.RegisterConnByGroup("group", "data_id")
        // redis.RegisterConnByLocal("group", "data_id")

        return h
      }

      func registerMiddleware(h *server.Hertz) {
        // pprof
        if local_conf.GetGConf().Hertz.EnablePprof {
          pprof.Register(h)
        }
        // gzip
        if local_conf.GetGConf().Hertz.EnableGzip {
          h.Use(gzip.Gzip(gzip.DefaultCompression))
        }

        // access log
        if local_conf.GetGConf().Hertz.EnableAccessLog {
          h.Use(accesslog.New())
        }

        // recovery
        h.Use(recovery.Recovery())

        // cores
        h.Use(cors.Default())

        // 自定义json序列化忽略omitempty 
        render.ResetJSONMarshal(jsoniter.Marshal)
        }



  - path: kit/xjsoniter/jsoniter.go
    delims:
      - ""
      - ""
    body: |-
      package xjsoniter

      import (
        "unsafe"
        "github.com/cloudwego/hertz/pkg/common/hlog"

        jsoniter "github.com/json-iterator/go"
        "github.com/modern-go/reflect2"
      )

      type ignoreOmitEmptyTagExtension struct {
        jsoniter.DummyExtension
      }

      type ignoreOmitEmptyTagEncoder struct {
        originDecoder jsoniter.ValEncoder
      }

      func (p *ignoreOmitEmptyTagEncoder) IsEmpty(ptr unsafe.Pointer) bool { //关键逻辑
        return false
      }

      func (p *ignoreOmitEmptyTagEncoder) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
        p.originDecoder.Encode(ptr, stream)
      }

      func (e *ignoreOmitEmptyTagExtension) DecorateEncoder(typ reflect2.Type, encoder jsoniter.ValEncoder) jsoniter.ValEncoder {
        return &ignoreOmitEmptyTagEncoder{encoder}
      }

      func init() {
        hlog.Debugf("修复omitemptytag问题")
        jsoniter.RegisterExtension(&ignoreOmitEmptyTagExtension{})
      }      